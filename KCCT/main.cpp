#include <iostream>
#include <algorithm> // std::min, std::max

class San {
private:
    double Lx, Ly;   // K√≠ch th∆∞·ªõc s√†n (m)
    double q;        // T·∫£i tr·ªçng s√†n (kN/m2)

public:
    San(double Lx_in, double Ly_in, double q_in = 25 * 0.12 + 2 + 2)
        : Lx(Lx_in), Ly(Ly_in), q(q_in) {}

    double tinh_hsan() {
        double h = 0;
        double Lmin = std::min(Lx, Ly);
        char lua_chon;
        int loaiSan;

        std::cout << "S√†n k√™ 4 c·∫°nh (2 ph∆∞∆°ng) (y/n)? ";
        std::cin >> lua_chon;

        if (lua_chon == 'y' || lua_chon == 'Y') {
            h = std::max(0.12, Lmin / 35.0); // m
        } else {
            std::cout << "1. S√†n k√™ 2 c·∫°nh (1 ph∆∞∆°ng)\n";
            std::cout << "2. S√†n c√¥ng x√¥n\n";
            std::cout << "Ch·ªçn lo·∫°i s√†n: ";
            std::cin >> loaiSan;

            switch (loaiSan) {
                case 1: {
                    std::cout << "Ch·ªçn ph∆∞∆°ng ch·ªãu l·ª±c ch√≠nh (1 = Lx, 2 = Ly): ";
                    int chon; std::cin >> chon;
                    double L = (chon == 1) ? Lx : Ly;
                    h = L / 30.0;
                    break;
                }
                case 2: {
                    std::cout << "Ch·ªçn ph∆∞∆°ng c√¥ng x√¥n (1 = Lx, 2 = Ly): ";
                    int chon; std::cin >> chon;
                    double L = (chon == 1) ? Lx : Ly;
                    h = L / 10.0;
                    break;
                }
                default:
                    std::cout << "‚õîÔ∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. M·∫∑c ƒë·ªãnh s√†n k√™ 4 c·∫°nh.\n";
                    h = std::max(0.12, Lmin / 35.0);
            }
        }

        std::cout << "\n‚úÖ Chi·ªÅu d√†y s√†n t√≠nh to√°n: " << h << " m (t∆∞∆°ng ƒë∆∞∆°ng " << h * 1000 << " mm)\n";
        return h;
    }
};


    //         int loaiSan;
    //         std::cout << "\nCh·ªçn lo·∫°i s√†n:\n"
    //                      "1. S√†n k√™ 4 c·∫°nh (2 ph∆∞∆°ng)\n"
    //                      "2. S√†n k√™ 2 c·∫°nh (1 ph∆∞∆°ng)\n"
    //                      "3. S√†n c√¥ng x√¥n\n"
    //                      "Nh·∫≠p l·ª±a ch·ªçn (1-3): ";
    //         std::cin >> loaiSan;
    
    //         double h = 0.12; // m - chi·ªÅu d√†y t·ªëi thi·ªÉu
    
    //         switch (loaiSan) {
    //             case 1: h = L / 35.0; break;
    //             case 2: {
    //                 std::cout << "Ch·ªçn ph∆∞∆°ng ch·ªãu l·ª±c ch√≠nh (1 = Lx, 2 = Ly): ";
    //                 int chon; std::cin >> chon;
    //                 L = (chon == 1) ? Lx : Ly;
    //                 h = L / 30.0;
    //                 break;
    //             }
    //             case 3: {
    //                 std::cout << "Ch·ªçn ph∆∞∆°ng c√¥ng x√¥n (1 = Lx, 2 = Ly): ";
    //                 int chon; std::cin >> chon;
    //                 L = (chon == 1) ? Lx : Ly;
    //                 h = L / 10.0;
    //                 break;
    //             }
    //             default:
    //                 std::cout << "‚õîÔ∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. M·∫∑c ƒë·ªãnh s√†n k√™ 4 c·∫°nh.\n";
    //                 h = L / 35.0;
    //         }
    
    //         if (h < 0.12) h = 0.12;
    //         h = std::ceil(h * 1000) / 1000.0;
    //         std::cout << "‚û°Ô∏è  Chi·ªÅu d√†y s√†n ƒë·ªÅ xu·∫•t: " << h << " m (" << h * 1000 << " mm)\n";
    //         return h;
    //     }
    
    //     double tinh_tai_trong_san(double h_san) {
    //         int loaiCT;
    //         const double g2 = 2.0; // t·∫£i ho√†n thi·ªán, tr·∫ßn
    //         const double lbt = 25.0; // kN/m3
    //         double g1 = lbt * h_san;
    //         double qsd = 2.0;
    
    //         std::cout << "\nCh·ªçn lo·∫°i c√¥ng tr√¨nh:\n"
    //                      "1. M√°i kh√¥ng ng∆∞·ªùi (1.0 kN/m¬≤)\n"
    //                      "2. Nh√† ·ªü (2.0 kN/m¬≤)\n"
    //                      "3. VƒÉn ph√≤ng (3.0 kN/m¬≤)\n"
    //                      "4. H√†nh lang c√¥ng c·ªông (5.0 kN/m¬≤)\n"
    //                      "Nh·∫≠p l·ª±a ch·ªçn (1-4): ";
    //         std::cin >> loaiCT;
    
    //         switch (loaiCT) {
    //             case 1: qsd = 1.0; break;
    //             case 2: qsd = 2.0; break;
    //             case 3: qsd = 3.0; break;
    //             case 4: qsd = 5.0; break;
    //             default:
    //                 std::cout << "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. M·∫∑c ƒë·ªãnh nh√† ·ªü.\n";
    //         }
    
    //         double q = g1 + g2 + qsd;
    //         std::cout << "\n‚úÖ T·ªïng t·∫£i tr·ªçng s√†n: q = " << q << " kN/m¬≤\n";
    //         return q;
    //     }
    
    //     void tinh_tai_len_dam(double q) {
    //         double Q = q * Lx * Ly;
    //         double q_ngan = q * Lx / 2.0;
    //         double q_dai = q * Ly / 2.0;
    
    //         std::cout << "\nüî∏ T·ªïng t·∫£i s√†n: Q = " << Q << " kN\n";
    //         std::cout << "üî∏ T·∫£i l√™n d·∫ßm NG·∫ÆN: " << q_ngan << " kN/m\n";
    //         std::cout << "üî∏ T·∫£i l√™n d·∫ßm D√ÄI:  " << q_dai << " kN/m\n";
    //     }
    
    //     void tinh_thep_san(double h_san, double q) {
    //         double tyLe = Lx / Ly;
    //         double alpha_nhip = 0.045;
    
    //         if (tyLe >= 0.95) alpha_nhip = 0.045;
    //         else if (tyLe >= 0.75) alpha_nhip = 0.050;
    //         else alpha_nhip = 0.060;
    
    //         double M = alpha_nhip * q * Lx * Lx;
    //         std::cout << "‚Üí M√¥ men u·ªën gi·ªØa nh·ªãp: " << M << " kNm\n";
    
    //         double R = 210; // MPa
    //         double h0 = h_san * 1000 - 20; // mm
    //         double As = (M * 1e6) / (R * h0); // mm¬≤/m
    
    //         std::cout << "‚û°Ô∏è  Di·ªán t√≠ch c·ªët th√©p y√™u c·∫ßu As: " << std::ceil(As) << " mm¬≤/m\n";
    //         PhuongAnThep phuongAn = goi_y_duong_kinh_thep(As);
    //         phuongAn.hien_thi();
    //     }
    // };
    