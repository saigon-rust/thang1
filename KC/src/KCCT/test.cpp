#include <iostream>
#include <cmath>
#include <unordered_map>
#include <string>

enum class LoaiDam {
    DonGian,
    LienTuc,
    CongXon,
    Nang
};

std::unordered_map<LoaiDam, std::pair<double, double>> tyLeDam = {
    {LoaiDam::DonGian, {1.0 / 10, 1.0 / 10}},
    {LoaiDam::LienTuc, {1.0 / 15, 1.0 / 12}},
    {LoaiDam::CongXon, {1.0 / 7,  1.0 / 5}},
    {LoaiDam::Nang,    {1.0 / 8,  1.0 / 8}}  // ch·ªâ 1 gi√° tr·ªã, nh∆∞ng v·∫´n d√πng pair
};

// H√†m l√†m tr√≤n l√™n b·ªôi s·ªë 50 (mm)
int lam_tron_len_50(double h) {
    return static_cast<int>(std::ceil(h * 1000 / 50.0)) * 50; // h (m) -> mm -> l√†m tr√≤n
}

// H√†m t√≠nh h_dam theo L (m), lo·∫°i d·∫ßm, v√† l√†m tr√≤n l√™n b·ªôi 50
int tinh_h_dam(double L, LoaiDam loai) {
    auto range = tyLeDam[loai];
    double h_min = range.first * L;
    double h_max = range.second * L;

    double h_tb = (h_min + h_max) / 2.0;
    return lam_tron_len_50(h_tb); // mm
}

// H√†m ti·ªán l·ª£i ƒë·ªÉ in t√™n lo·∫°i d·∫ßm
std::string ten_dam(LoaiDam loai) {
    switch (loai) {
        case LoaiDam::DonGian: return "D·∫ßm ƒë∆°n gi·∫£n 1 nh·ªãp";
        case LoaiDam::LienTuc: return "D·∫ßm li√™n t·ª•c ‚â• 2 nh·ªãp";
        case LoaiDam::CongXon: return "D·∫ßm c√¥ng x√¥n (console)";
        case LoaiDam::Nang:    return "D·∫ßm ch·ªãu l·ª±c n·∫∑ng";
        default: return "Kh√¥ng x√°c ƒë·ªãnh";
    }
}

// V√≠ d·ª• s·ª≠ d·ª•ng
int main() {
    double L = 6; // chi·ªÅu d√†i nh·ªãp d·∫ßm (m)

    for (auto loai : {LoaiDam::DonGian, LoaiDam::LienTuc, LoaiDam::CongXon, LoaiDam::Nang}) {
        int h = tinh_h_dam(L, loai);
        std::cout << "üîπ " << ten_dam(loai) << " (L = " << L << " m): h ‚â• " << h << " mm\n";
    }

    return 0;
}
